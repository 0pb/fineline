[gd_scene load_steps=4 format=2]

[ext_resource path="res://assets/white_rect.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends StaticBody2D


onready var node_collision = get_node(\"collision\")
onready var line2d = get_node(\"Line2D\")
onready var particles = get_node(\"CPUParticles2D\")
onready var particles2 = get_node(\"CPUParticles2D2\")
onready var raycast = get_node(\"RayCast2D\")

var world_shifted = false

var laserbeam_on = false
export var enable_laser_time = false
export var toggle_laser_time : float = 1
export var rotation_value : float = 0

export var in_hell = false
export var in_heaven = false



func _ready():
    if enable_laser_time:
        $Timer.set_wait_time(toggle_laser_time)
        $Timer.start()

    raycast.add_exception($collision)
    
    if in_hell:
        add_to_group(\"hell\")
    if in_heaven:
        add_to_group(\"heaven\")


func _physics_process(_delta):
    
    rotation_degrees += rotation_value
    
    if raycast.is_colliding():
        var cast_point = to_local(raycast.get_collision_point())
        line2d.points[1] = cast_point
        
        if raycast.get_collider().name == \"player\":
            if world_shifted == false:
                AutoloadControl.player_death()
                pass
        if raycast.get_collider().name.substr(0,4) != \"beam\":
            particles.position = cast_point * 0.5
            particles.emission_rect_extents = Vector2(cast_point.length() * 0.5, 7)
            particles2.position = cast_point
            particles2.global_rotation = raycast.get_collision_normal().angle()
            $collision.position = cast_point
    
    


func update_signals(parent_node):
    node_collision.connect(\"body_entered\", parent_node, \"_on_laser_entered\")


func disable_on_world_change(bool_):
    if bool_:
        node_collision.monitoring = true
        world_shifted = false
        _enable_laser()
        #print(\"True\")
    else:
        node_collision.monitoring = false
        world_shifted = true
        _disable_laser()
        #print(\"False\")


func _on_Timer_timeout():
    if world_shifted == false:
        laserbeam_on = not laserbeam_on
        
        if laserbeam_on == false:
            _disable_laser()
        else:
            _enable_laser()
        
    pass # Replace with function body.

func _enable_laser():
    #$CPUParticles2D.visible = true
    #$CPUParticles2D2.visible = true
    $Line2D.visible = true
    $RayCast2D.enabled = true
    $RayCast2D.visible = true
    $collision/CollisionShape2D.disabled = false

func _disable_laser():
    #$CPUParticles2D.visible = false
    #$CPUParticles2D2.visible = false
    $Line2D.visible = false
    $RayCast2D.enabled = false
    $RayCast2D.visible = false
    $collision/CollisionShape2D.disabled = true
"

[sub_resource type="RectangleShape2D" id=2]

[node name="laser" type="StaticBody2D"]
script = SubResource( 1 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="."]
amount = 10
local_coords = false
emission_shape = 2
emission_rect_extents = Vector2( 30, 30 )
spread = 180.0
gravity = Vector2( 0, 0 )
initial_velocity = 5.0
scale_amount = 3.0
color = Color( 1, 0.545098, 0.545098, 1 )

[node name="CPUParticles2D2" type="CPUParticles2D" parent="."]
amount = 10
local_coords = false
spread = 60.0
gravity = Vector2( 0, 0 )
initial_velocity = 40.0
scale_amount = 3.0
color = Color( 1, 0, 0, 1 )

[node name="Line2D" type="Line2D" parent="."]
scale = Vector2( 1.00425, 1 )
points = PoolVector2Array( 0, 0, 50, 0 )
default_color = Color( 1, 0.262745, 0.262745, 1 )
begin_cap_mode = 2
end_cap_mode = 2

[node name="RayCast2D" type="RayCast2D" parent="."]
enabled = true
cast_to = Vector2( 3000, 0 )
collision_mask = 3

[node name="Sprite" type="Sprite" parent="."]
self_modulate = Color( 0.286275, 0.286275, 0.286275, 1 )
position = Vector2( 0, -1.13249e-06 )
scale = Vector2( 0.25, 0.25 )
texture = ExtResource( 1 )

[node name="collision" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="collision"]
shape = SubResource( 2 )

[node name="Timer" type="Timer" parent="."]

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
